name: CMake

on:
    - push
    - pull_request

jobs:
    build:
        # Make sure this builds on a wide variety of systems
        strategy:
            fail-fast: false
            matrix:
                build_type:
                    - Release
                    - Debug
                os:
                    - ubuntu-latest
#                    - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            -   uses: actions/checkout@v3

            -   name: Setup Python
                uses: actions/setup-python@v4
                with:
                    python-version: '3.x'

            -   name: Install Conan
                run: pip install conan

            -   name: Restore Conan Cache
                uses: actions/cache/restore@v4
                with:
                    path: ~/.conan2
                    key: conan-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('conanfile.py') }}
                    restore-keys: |
                        conan-${{ runner.os }}-${{ matrix.build_type }}-
                        conan-${{ runner.os }}-

            -   name: Configure Conan Profile
                run: conan profile detect --force --name=libmcstatus_${{ matrix.build_type }}

            -   name: Install Conan Dependencies
                run: conan install . --build=missing -s build_type=${{ matrix.build_type }} -s compiler.cppstd=23 -pr:a libmcstatus_${{ matrix.build_type }}

            -   name: Save Conan Cache
                uses: actions/cache/save@v4
                with:
                    path: ~/.conan2
                    key: conan-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('conanfile.py') }}

            -   name: Configure CMake
                # Configure CMake in a 'build' subdirectory with Conan toolchain
                run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=build/${{ matrix.build_type }}/generators/conan_toolchain.cmake

            -   name: Build
                # Build your program with the given configuration
                run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }} -j "$(nproc --all)"

            -   name: Test
                working-directory: ${{github.workspace}}/build
                # Execute tests defined by the CMake configuration.
                run: ctest -C ${{ matrix.build_type }}
                continue-on-error: true

            # upload test results
            -   uses: actions/upload-artifact@v4
                if: success() || failure()
                with:
                    name: test-results_${{ matrix.build_type }}_${{ matrix.os }}
                    path: build/reports/**/*.xml
