# Basics/global stuff
stages:
    - build
    - test
    - coverage

default:
    tags:
        - shell
        - linux

variables:
    CMAKE_COLOR_MAKEFILE: "ON"
    COLOR: "always"

# Template Jobs
.release:
    variables:
        BUILD_TYPE: Release
    needs:
        - build:release

.debug:
    variables:
        BUILD_TYPE: Debug
    needs:
        - build:debug

.build:
    stage: build
    needs: [ ]
    before_script:
        - conan profile detect --force --name=libmcstatus_$BUILD_TYPE
    script:
        - conan install . --build=missing -s build_type=$BUILD_TYPE -s compiler.cppstd=20 -pr libmcstatus_$BUILD_TYPE
        - cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=build/$BUILD_TYPE/generators/conan_toolchain.cmake ${ENABLE_COVERAGE:+-DENABLE_COVERAGE=ON}
        - cmake --build build --config $BUILD_TYPE
    artifacts:
        expire_in: 10 mins
        paths:
            - build/*

.test:
    stage: test
    script:
        - cd build
        - ctest -C $BUILD_TYPE
    allow_failure: true
    artifacts:
        when: always
        paths:
            - build/reports/**/*.xml
        reports:
            junit: build/reports/**/*.xml

.coverage:
    variables:
        BUILD_TYPE: Debug
        ENABLE_COVERAGE: "ON"

# Jobs
build:release:
    extends:
        - .release
        - .build

build:debug:
    extends:
        - .debug
        - .build

build:coverage:
    extends:
        - .coverage
        - .build

test:release:
    extends:
        - .release
        - .test

test:debug:
    extends:
        - .debug
        - .test

coverage:
    extends:
        - .coverage
        - .test
    stage: coverage
    after_script:
        - cd build
        # Generate coverage data
        - gcov -r $(find . -name "*.gcno")
        - lcov --capture --directory . --output-file coverage.info
        - lcov --remove coverage.info '/usr/*' --output-file coverage.info
        - lcov --remove coverage.info '*/tests/*' --output-file coverage.info
        - lcov --remove coverage.info '*/build/*' --output-file coverage.info
        - lcov_cobertura coverage.info --output coverage.xml
        - genhtml coverage.info --output-directory coverage_html
    artifacts:
        when: always
        paths:
            - build/reports/**/*.xml
            - build/coverage.info
            - build/coverage_html/
            - build/coverage.xml
        reports:
            junit: build/reports/**/*.xml
            coverage_report:
                coverage_format: cobertura
                path: build/coverage.xml
    coverage: '/lines......: \d+\.\d+%/'
    needs:
        - build:coverage

